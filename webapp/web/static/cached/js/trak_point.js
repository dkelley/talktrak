// Generated by CoffeeScript 1.6.3
(function() {
  var App, EditPointView, TrakPointCollection, TrakPointListView, TrakPointModel, TrakPointView, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $.ajaxSetup({
    headers: {
      'X-Api-Stateful': true
    }
  });

  window.App = App = {
    c: {},
    m: {},
    v: {}
  };

  _.templateSettings.variable = 'd';

  TrakPointModel = (function(_super) {
    __extends(TrakPointModel, _super);

    function TrakPointModel() {
      _ref = TrakPointModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TrakPointModel.prototype.defaults = function() {
      return {
        trakId: currentTrakId,
        title: 'Sample Title',
        description: 'Add your notes here...',
        highlighted: false,
        editable: trakAction === "edit" || trakAction === "collaborate"
      };
    };

    TrakPointModel.prototype.validate = function() {
      if (_.isEmpty(this.get('title'))) {
        return "Title cannot be empty";
      }
      if (_.isNull(this.get('trakId'))) {
        return "Error no id";
      }
    };

    TrakPointModel.prototype.highlightPoint = function() {
      var _this = this;
      return (this.sync || Backbone.sync).call(this, 'highlightPoint', this, {
        url: "" + (this.url()) + "/highlight",
        type: 'POST',
        complete: function() {
          return _this.set({
            highlighted: true
          });
        }
      });
    };

    TrakPointModel.prototype.retrievePoint = function() {
      var _this = this;
      return (this.sync || Backbone.sync).call(this, 'retrievePoint', this, {
        url: "" + (this.url()) + "/retrieve",
        type: 'POST',
        complete: function() {
          return _this.set({
            highlighted: false
          });
        }
      });
    };

    TrakPointModel.prototype.urlRoot = '/api/point';

    TrakPointModel.prototype.idAttribute = 'pointId';

    return TrakPointModel;

  })(Backbone.Model);

  TrakPointCollection = (function(_super) {
    __extends(TrakPointCollection, _super);

    function TrakPointCollection() {
      _ref1 = TrakPointCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    TrakPointCollection.prototype.url = '/api/point';

    TrakPointCollection.prototype.model = TrakPointModel;

    return TrakPointCollection;

  })(Backbone.Collection);

  EditPointView = (function(_super) {
    __extends(EditPointView, _super);

    function EditPointView() {
      _ref2 = EditPointView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    EditPointView.prototype.id = 'trakPoint';

    EditPointView.prototype.className = 'modal hide fade';

    EditPointView.prototype.events = {
      "click .js-savePoint": "savePoint",
      "click .js-closeModal": "closePoint"
    };

    EditPointView.prototype.template = _.template("<div class=\"modal-header\">\n  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n  <h3 class=\"trakTitle\" contenteditable=\"true\"><%= d.title %></h3>\n</div>\n<div class=\"modal-body\">\n  <p class=\"js-description\" style=\"height:300px\" contenteditable=\"true\"><%= d.description %></p>\n</div>\n<div class=\"modal-footer\">\n  <!-- a href=\"#\" class=\"btn pull-left btn-info\">Upload File</a -->\n  <a href=\"#\" class=\"btn js-closeModal\">Close</a>\n  <a href=\"#\" class=\"btn btn-primary js-savePoint\">Save changes</a>\n</div>");

    EditPointView.prototype.initialize = function() {
      return this.render();
    };

    EditPointView.prototype.savePoint = function(e) {
      var _this = this;
      e.preventDefault();
      this.model.set({
        description: this.$('.js-description').html(),
        title: this.$('.trakTitle').html()
      });
      this.collection.add(this.model, {
        at: 0
      });
      return this.model.save(null, {
        error: function() {
          alert('Error saving the point!');
          if (_this.model.isNew()) {
            return _this.collection.remove(_this.model);
          }
        }
      }).done(function() {
        return _this.$el.modal('hide');
      });
    };

    EditPointView.prototype.closePoint = function(e) {
      var _this = this;
      e.preventDefault();
      this.$el.on('hidden', function() {
        return _this.remove();
      });
      return this.$el.modal('hide');
    };

    EditPointView.prototype.render = function() {
      var callback;
      callback = function() {
        return $('h3.trakTitle').focus();
      };
      setTimeout(callback, 1000);
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return EditPointView;

  })(Backbone.View);

  TrakPointView = (function(_super) {
    __extends(TrakPointView, _super);

    function TrakPointView() {
      _ref3 = TrakPointView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    TrakPointView.prototype.tagName = "li";

    TrakPointView.prototype.className = 'trak-point';

    TrakPointView.prototype.events = {
      'click': 'editPoint',
      'click .js-delete': 'deletePoint',
      'click .js-highlight.pull': 'retrievePoint',
      'click .js-highlight.pass': 'highlightPoint'
    };

    TrakPointView.prototype.initialize = function() {
      this.listenTo(this.model, 'change', this.render);
      return this.listenTo(this.model, 'remove', this.remove);
    };

    TrakPointView.prototype.deletePoint = function() {
      if (confirm('Are you sure you would like to delete this point')) {
        return this.model.destroy();
      }
    };

    TrakPointView.prototype.highlightPoint = function() {
      return this.model.highlightPoint();
    };

    TrakPointView.prototype.retrievePoint = function() {
      return this.model.retrievePoint();
    };

    TrakPointView.prototype.editPoint = function(e) {
      var trakPointModal;
      if ($(e.target).hasClass('js-delete') || $(e.target).hasClass('js-highlight')) {
        return e.preventDefault();
      } else {
        return trakPointModal = new EditPointView({
          model: this.model,
          collection: this.model.collection
        }).$el.modal();
      }
    };

    TrakPointView.prototype.template = _.template("      <% if (d.editable) { %>\n<% if (trakAction == 'collaborate') { %>      \n	        <% if (d.highlighted) { %>\n	        <span class=\"trak-highlight trak-action js-highlight pull\">Pull...</span>\n	        <% } else { %>\n	        <span class=\"trak-highlight trak-action js-highlight pass\">Pass...</span>\n	        <% } %>	    \n        <% } else if (trakAction == 'edit'){ %>\n      		<span class=\"trak-del trak-action js-delete\">Delete</span>\n      	<% } %>\n      <% } %>\n      <h3><%= d.title %></h3>\n      <% if (d.description.length > 150) { %>\n        <p><%= d.description.substring(0,150) + \"...\" %></p>\n      <% }else{ %>\n        <p><%= d.description %></p>\n      <% } %>");

    TrakPointView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      this.$el.attr('id', this.model.id);
      return this;
    };

    return TrakPointView;

  })(Backbone.View);

  TrakPointListView = (function(_super) {
    __extends(TrakPointListView, _super);

    function TrakPointListView() {
      _ref4 = TrakPointListView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    TrakPointListView.prototype.initialize = function() {
      this.listenTo(this.collection, 'add', this.addPoint);
      return this.listenTo(this.collection, 'reset', this.render);
    };

    TrakPointListView.prototype.events = {
      'click .js-addPoint': 'addNewPoint'
    };

    TrakPointListView.prototype.addNewPoint = function(e) {
      e.preventDefault();
      return new EditPointView({
        model: new TrakPointModel,
        collection: this.collection
      }).$el.modal();
    };

    TrakPointListView.prototype.addPoint = function(model) {
      this.newPoint = new TrakPointView({
        model: model
      }).render();
      return $('#trakPoints').append(this.newPoint.$el);
    };

    TrakPointListView.prototype.template = _.template("  		<div class=\"js-addPoint\">\n	<a href=\"#\" class=\"btn btn-large btn-info\">+ Add Point</a>\n</div>");

    TrakPointListView.prototype.render = function() {
      this.$el.empty();
      this.$el.html(this.template);
      this.collection.each(this.addPoint, this);
      return this;
    };

    return TrakPointListView;

  })(Backbone.View);

  this.points = new TrakPointCollection();

  this.pointListView = new TrakPointListView({
    collection: this.points,
    el: $("#trakPoints")
  });

  if (currentTrakId) {
    this.points.url = '/api/trak/' + currentTrakId + '/points';
    this.points.fetch();
  } else {
    this.pointListView.render();
  }

}).call(this);
