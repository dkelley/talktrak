// Generated by CoffeeScript 1.6.3
(function() {
  var AccountModel, App, EditPointView, MainNavView, Router, TrakCollection, TrakEditView, TrakListView, TrakModel, TrakPointCollection, TrakPointListView, TrakPointModel, TrakPointView, TrakTextView, _ref, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = App = {
    c: {},
    m: {},
    v: {}
  };

  $.ajaxSetup({
    headers: {
      'X-Api-Stateful': true
    }
  });

  _.templateSettings.variable = 'd';

  AccountModel = (function(_super) {
    __extends(AccountModel, _super);

    function AccountModel() {
      _ref = AccountModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AccountModel.prototype.idAttribute = 'accountId';

    return AccountModel;

  })(Backbone.Model);

  TrakPointModel = (function(_super) {
    __extends(TrakPointModel, _super);

    function TrakPointModel() {
      _ref1 = TrakPointModel.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    TrakPointModel.prototype.defaults = function() {
      return {
        trakId: App.m.current ? App.m.current.id : null,
        title: 'Sample Title',
        description: 'Add your notes here...'
      };
    };

    TrakPointModel.prototype.validate = function() {
      if (_.isEmpty(this.get('title'))) {
        return "Title cannot be empty";
      }
      if (_.isNull(this.get('trakId'))) {
        return "Error no id";
      }
    };

    TrakPointModel.prototype.urlRoot = '/api/point';

    TrakPointModel.prototype.idAttribute = 'pointId';

    return TrakPointModel;

  })(Backbone.Model);

  TrakPointCollection = (function(_super) {
    __extends(TrakPointCollection, _super);

    function TrakPointCollection() {
      _ref2 = TrakPointCollection.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    TrakPointCollection.prototype.url = '/api/point';

    TrakPointCollection.prototype.model = TrakPointModel;

    return TrakPointCollection;

  })(Backbone.Collection);

  TrakModel = (function(_super) {
    __extends(TrakModel, _super);

    function TrakModel() {
      _ref3 = TrakModel.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    TrakModel.prototype.urlRoot = '/api/trak';

    TrakModel.prototype.idAttribute = 'trakId';

    TrakModel.prototype.initialize = function() {
      this.points = new TrakPointCollection();
      if (App.m.current) {
        this.points.url = this.url() + '/points';
        return this.points.fetch();
      }
    };

    return TrakModel;

  })(Backbone.Model);

  TrakCollection = (function(_super) {
    __extends(TrakCollection, _super);

    function TrakCollection() {
      _ref4 = TrakCollection.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    TrakCollection.prototype.url = '/api/trak';

    TrakCollection.prototype.model = TrakModel;

    TrakCollection.prototype.parse = function(resp) {
      return resp.traks;
    };

    return TrakCollection;

  })(Backbone.Collection);

  MainNavView = (function(_super) {
    __extends(MainNavView, _super);

    function MainNavView() {
      _ref5 = MainNavView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    MainNavView.prototype.events = {
      "click [signOutLink]": "signOut"
    };

    MainNavView.prototype.template = _.template("<ul class=\"nav traksnav\">\n  <li>\n    <a href=\"#traks\">Traks</a>\n  </li>\n  <li>\n    <a href=\"#account\">Account</a>\n  </li>\n  </ul>    \n  <ul class=\"nav pull-right\">\n  <li>\n    <a signOutLink href=\"javascript://\">Sign-out</a>\n  </li>\n  </ul>");

    MainNavView.prototype.initialize = function() {
      this.render();
      return this.listenTo(Backbone.history, 'route', this.handleRoute);
    };

    MainNavView.prototype.signOut = function(e) {
      return stack.api({
			url: "/api/accounts/sign-out",
			method: "POST",
			onSuccess: function(response) {
				var destinationUrl = stack.getUrlParameter("destinationUrl");				
				location.href = destinationUrl ? destinationUrl : response.destinationUrl;
			},
			onFailure: function(error) {
				$("[errors]").text(error.description).show();
			}		
		});;
    };

    MainNavView.prototype.render = function() {
      this.$el.html(this.template());
      return this;
    };

    MainNavView.prototype.handleRoute = function(router, route, args) {
      var trakId;
      this.render();
      if (route === 'showTrak') {
        trakId = args[0];
        this.$el.find('.traksnav').append("<li><a href='#traks/" + trakId + "'>Trak " + trakId + "</a></li>");
      }
      if (route === 'createTrak') {
        App.m.current = null;
        this.$el.find('.traksnav').append("<li><a href='#traks/create'>CreateTrak</a></li>");
      }
      return this.$("a[href='#" + (Backbone.history.getHash()) + "']").each(function() {
        return $(this).parent('li').addClass('active');
      });
    };

    return MainNavView;

  })(Backbone.View);

  EditPointView = (function(_super) {
    __extends(EditPointView, _super);

    function EditPointView() {
      _ref6 = EditPointView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    EditPointView.prototype.id = 'trakPoint';

    EditPointView.prototype.className = 'modal hide fade';

    EditPointView.prototype.events = {
      "click .js-savePoint": "savePoint",
      "click .js-closeModal": "closePoint"
    };

    EditPointView.prototype.template = _.template("<div class=\"modal-header\">\n  <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n  <h3 class=\"trakTitle\" contenteditable=\"true\">Trak Point</h3>\n</div>\n<div class=\"modal-body\">\n  <p class=\"js-description\" style=\"height:300px\" contenteditable=\"true\"><%= d.description %></p>\n</div>\n<div class=\"modal-footer\">\n  <!-- a href=\"#\" class=\"btn pull-left btn-info\">Upload File</a -->\n  <a href=\"#\" class=\"btn js-closeModal\">Close</a>\n  <a href=\"#\" class=\"btn btn-primary js-savePoint\">Save changes</a>\n</div>");

    EditPointView.prototype.initialize = function() {
      return this.render();
    };

    EditPointView.prototype.savePoint = function(e) {
      var _this = this;
      e.preventDefault();
      this.model.set({
        description: this.$('.js-description').html(),
        title: this.$('.trakTitle').html()
      });
      console.log(this.model);
      this.collection.add(this.model);
      return this.model.save(null, {
        error: function() {
          alert('Error saving the point!');
          if (_this.model.isNew()) {
            return _this.collection.remove(_this.model);
          }
        }
      }).done(function() {
        return _this.$el.modal('hide');
      });
    };

    EditPointView.prototype.closePoint = function(e) {
      var _this = this;
      e.preventDefault();
      this.$el.on('hidden', function() {
        return _this.remove();
      });
      return this.$el.modal('hide');
    };

    EditPointView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return EditPointView;

  })(Backbone.View);

  TrakTextView = (function(_super) {
    __extends(TrakTextView, _super);

    function TrakTextView() {
      _ref7 = TrakTextView.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    TrakTextView.prototype.events = {
      'click .save-button': 'saveTrak',
      'mousedown .editable': 'editableClick'
    };

    TrakTextView.prototype.template = _.template("<div id=\"trakEditor\" class=\"well\">\n  <div id=\"mainEditor\" data-button-class=\"all\" class=\"editable trakContainer\"><%= d.description %></div>\n</div>");

    TrakTextView.prototype.initialize = function() {
      return this.listenToOnce(this.model, 'sync', this.render);
    };

    TrakTextView.prototype.editableClick = etch.editableInit;

    TrakTextView.prototype.render = function() {
      this.$el.empty();
      this.$el.append(this.template(this.model.toJSON()));
      this.$el.append('<button class="btn btn-success save-button">Save Button</button>');
      return this;
    };

    TrakTextView.prototype.saveTrak = function() {
      var _this = this;
      return this.model.save({
        description: $("#mainEditor").html(),
        title: "New Trak"
      }, {
        success: function() {
          return Backbone.history.navigate("traks/" + _this.model.id, {
            trigger: true
          });
        }
      });
    };

    return TrakTextView;

  })(Backbone.View);

  TrakPointView = (function(_super) {
    __extends(TrakPointView, _super);

    function TrakPointView() {
      _ref8 = TrakPointView.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    TrakPointView.prototype.className = 'trak-point';

    TrakPointView.prototype.events = {
      'click': 'editPoint',
      'click .js-delete': 'deletePoint'
    };

    TrakPointView.prototype.initialize = function() {
      this.listenTo(this.model, 'change', this.render);
      return this.listenTo(this.model, 'remove', this.remove);
    };

    TrakPointView.prototype.deletePoint = function() {
      if (confirm('Are you sure you would like to delete this point')) {
        return this.model.destroy();
      }
    };

    TrakPointView.prototype.editPoint = function(e) {
      if ($(e.target).hasClass('js-delete')) {
        return e.preventDefault();
      } else {
        return new EditPointView({
          model: this.model,
          collection: this.model.collection
        }).$el.modal();
      }
    };

    TrakPointView.prototype.template = _.template("<span class=\"trak-del js-delete\">Delete</span>\n<h3><%= d.title %></h3>\n<p><%= d.description %></p>");

    TrakPointView.prototype.render = function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return TrakPointView;

  })(Backbone.View);

  TrakPointListView = (function(_super) {
    __extends(TrakPointListView, _super);

    function TrakPointListView() {
      _ref9 = TrakPointListView.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    TrakPointListView.prototype.initialize = function() {
      this.listenTo(this.collection, 'add', this.addPoint);
      return this.listenTo(this.collection, 'reset', this.render);
    };

    TrakPointListView.prototype.addPoint = function(model) {
      return this.$el.append(new TrakPointView({
        model: model
      }).render().el);
    };

    TrakPointListView.prototype.render = function() {
      this.$el.empty();
      this.collection.each(this.addPoint, this);
      return this;
    };

    return TrakPointListView;

  })(Backbone.View);

  TrakEditView = (function(_super) {
    __extends(TrakEditView, _super);

    function TrakEditView() {
      _ref10 = TrakEditView.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    TrakEditView.prototype.initialize = function() {
      this.listenTo(this.model.points, "reset", this.render);
      return this.listenTo(this.model, "all", this.render);
    };

    TrakEditView.prototype.events = {
      "click .js-addPoint": "addPoint"
    };

    TrakEditView.prototype.template = _.template("<div class=\"span8\">\n  <div id=\"js-trakTextView\"></div>\n</div>\n<div class=\"span4\">\n  <div class=\"well\">\n  <% if (App.m.current && App.m.current.id) { %>\n  <hr>\n  <a href=\"#\" class=\"btn btn-large btn-info js-addPoint\">+ Add Point</a>\n  <% } else { %>\n  Save Trak To Add Points\n  <% } %>\n  <div id=\"trakPoints\" class=\"well\"></div>\n  </div>\n</div>");

    TrakEditView.prototype.addPoint = function(e) {
      e.preventDefault();
      return new EditPointView({
        model: new TrakPointModel,
        collection: this.model.points
      }).$el.modal();
    };

    TrakEditView.prototype.render = function() {
      var _this = this;
      this.$el.html(this.template());
      _.defer(function() {
        new TrakTextView({
          model: _this.model,
          el: $("#js-trakTextView")
        }).render();
        return new TrakPointListView({
          collection: _this.model.points,
          el: $("#trakPoints")
        }).render();
      });
      return this;
    };

    return TrakEditView;

  })(Backbone.View);

  TrakListView = (function(_super) {
    __extends(TrakListView, _super);

    function TrakListView() {
      _ref11 = TrakListView.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    TrakListView.prototype.className = 'span12';

    TrakListView.prototype.events = {
      'click tr[data-trakId]': 'showTrak'
    };

    TrakListView.prototype.template = _.template("<table class=\"table table-hover\">\n  <thead>\n    <tr>\n      <th>Trak Title</th>\n      <th>Creator</th>\n      <th>Role</th>\n      <th>Last Updated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <% if (d.length > 0) { %>\n      <% _.each(d, function (trak) { %>\n      <tr data-trakId=\"<%= trak.trakId %>\">\n        <td><%= trak.title %></td>\n        <td><%= trak.username %></td>\n        <td><%= trak.role %></td>\n        <td><%= new Date(trak.updatedDate) %></td>\n      </tr>\n      <% }); %>\n    <% } else { %>\n      <tr class=\"js-addTrak\">\n        <td colspan=\"3\">There are no Traks yet. Click to add one</td>\n      </tr>\n    <% } %>\n  </tbody>\n</table>\n\n<hr>\n\n<% if (d.length > 0) { %>\n<div class=\"centered\">\n  <a href=\"#traks/create\" class=\"btn btn-large btn-success\">Add new Presentation</a>\n</div>\n<% } %>");

    TrakListView.prototype.showTrak = function(e) {
      var id;
      e.preventDefault();
      id = $(e.currentTarget).attr('data-trakId');
      return Backbone.history.navigate("traks/" + id, {
        trigger: true
      });
    };

    TrakListView.prototype.render = function() {
      this.$el.html(this.template(this.collection.toJSON()));
      return this;
    };

    return TrakListView;

  })(Backbone.View);

  Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      _ref12 = Router.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    Router.prototype.routes = {
      'traks/create': 'createTrak',
      'traks/:id': 'showTrak',
      'traks': 'home',
      'account': 'account',
      '': 'redir'
    };

    Router.prototype.redir = function() {
      return Backbone.history.navigate('traks', {
        trigger: true
      });
    };

    Router.prototype.home = function() {
      return $("#appArea").html(new TrakListView({
        collection: App.c.traks
      }).render().el);
    };

    Router.prototype.account = function() {
      return $("#appArea").html('<div class="span12">Coming Soon</div>');
    };

    Router.prototype.createTrak = function() {
      return $("#appArea").html(new TrakEditView({
        model: new TrakModel()
      }).render().el);
    };

    Router.prototype.showTrak = function(id) {
      var model;
      model = App.c.traks.get(id) || new TrakModel({
        trakId: id
      });
      App.m.current = model;
      return $("#appArea").html(new TrakEditView({
        model: model
      }).render().el);
    };

    return Router;

  })(Backbone.Router);

  $(function() {
    App.c.traks = new TrakCollection();
    return App.c.traks.fetch().done(function() {
      App.nav = new MainNavView({
        el: $("#talktrak-nav")
      });
      App.router = new Router();
      Backbone.history.start({
        root: '/home'
      });
      return $('.footer').show();
    });
  });

}).call(this);
